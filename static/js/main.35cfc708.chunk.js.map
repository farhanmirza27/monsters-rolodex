{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","console","log","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAGaA,EAAO,SAACC,GACjB,OACI,sBAAKC,UAAY,iBAAjB,UACC,qBAAKC,IAAG,+BAA2BF,EAAMG,QAAQC,GAAzC,0BAAqEC,IAAI,YAChF,6BAAKL,EAAMG,QAAQG,OACnB,kCAAKN,EAAMG,QAAQI,MAAnB,WCJGC,EAAW,SAACR,GAErB,OADAS,QAAQC,IAAIV,GAEL,qBAAKC,UAAW,YAAhB,SAESD,EAAMW,SAASC,KAAI,SAAAT,GAAO,OACtB,cAAC,EAAD,CAAwBA,QAAWA,GAAvBA,EAAQC,UCP9BS,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACtB,uBAAOd,UAAY,SACnBe,KAAO,SACPF,YAAeA,EACfG,SAAYF,MC0CDG,E,kDAzCb,aAAe,IAAD,8BACZ,gBAWFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAVrC,EAAKC,MAAQ,CACXb,SAAY,GACZU,YAAa,IALH,E,qDAgBd,WAAqB,IAAD,OAClBI,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,SAAUkB,S,oBAG5C,WAAU,IAAD,EAE0BC,KAAKN,MAA/Bb,EAFA,EAEAA,SAAUU,EAFV,EAEUA,YACXU,EAAmBpB,EAASqB,QAAO,SAAA7B,GAAO,OAC9CA,EAAQG,KAAK2B,cAAcC,SAASb,EAAYY,kBAElD,OACE,sBAAKhC,UAAU,MAAf,UACE,oDACF,cAAC,EAAD,CACEa,YAAc,kBACdC,aAAgBe,KAAKf,eAExB,cAAC,EAAD,CAAUJ,SAAYoB,W,GArCTI,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.35cfc708.chunk.js","sourcesContent":["import React from \"react\";\nimport './card-styles.css';\n\nexport const Card = (props) =>   {\n    return(\n        <div className = \"card-container\">\n         <img src= {`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt=\"monster\"/>\n          <h2>{props.monster.name}</h2>\n          <p> {props.monster.email} </p>\n        </div>\n    )\n}","import React from \"react\";\nimport './card-list.styles.css';\nimport {Card} from '../card/card.component';\n\nexport const CardList = (props) =>  {\n    console.log(props)\n    return (\n           <div className =\"card-list\">\n              {\n                    props.monsters.map(monster => \n                        <Card key= {monster.id} monster = {monster}/> \n                  )\n              }\n           </div>\n         \n        )\n}","import React from \"react\";\nimport './search-box.styles.css';\n\nexport  const SearchBox = ({placeholder, handleChange}) =>  (\n    <input className = \"search\"\n    type = 'search' \n    placeholder = {placeholder}\n    onChange = {handleChange}\n    />\n)","import {Component} from 'react';\nimport './App.css';\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from './components/search-box/search-box.component';\n\n\nclass App extends Component {\n  \n  constructor() {\n    super();\n\n    this.state = {\n      monsters :  [],\n      searchField: ''\n    }\n\n    // this.handleChange = this.handleChange.bind(this);\n\n  }\n\n  handleChange = (e) => {\n    this.setState({searchField: e.target.value})\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n     .then(response => response.json())\n     .then(users => this.setState({ monsters: users}))\n  }\n\n  render() {\n   \n    const {monsters, searchField } = this.state; \n    const filteredMonsters = monsters.filter(monster =>  \n      monster.name.toLowerCase().includes(searchField.toLowerCase()))\n\n    return (\n      <div className=\"App\">\n        <h1> Monsters Rolodex </h1>\n      <SearchBox \n        placeholder = \"search monsters\"\n        handleChange = {this.handleChange}\n      />\n     <CardList monsters = {filteredMonsters}/>    \n    </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}